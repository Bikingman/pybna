#############################################
# Default configuration file for pyBNA
#
# Optional parameters are commented out
# In general, optional parameters can be
# deduced through code so you'd only
# want to specify these if you have an
# unusual circumstance
#
# Lines with a trailing # indicate values
# that can be overridden by arguments in
# the code (and can therefore be ignored
# here if desired)
#############################################
# srid: 4326
db:
    user: "gis" #
    password: "gis" #
    blocks:
        table: "neighborhood_census_blocks" #
        id_column: "blockid10" #

scenario:
    roads:
        table: "neighborhood_ways" #
        # id_column: road_id
        speed_limit: "speed_limit"
        lanes:
            forward: "ft_lanes"
            backward: "tf_lanes"
        parking:
            forward: "ft_park"
            backward: "tf_park"
        bike_infra:
            forward: "ft_bike_infra"
            backward: "tf_bike_infra"
        stress:
            segment:
                forward: "ft_seg_stress"
                backward: "tf_seg_stress"
            intersection:
                forward: "ft_int_stress"
                backward: "tf_int_stress"
    intersections:
        table: "neighborhood_ways_intersections" #
        # id_column: int_id
    edges:
        table: "neighborhood_ways_net_link" #
        source_column: "source_vert"
        target_column: "target_vert"
        stress_column: "link_stress"
        cost_column: "link_cost"
        # id_column: link_id
    nodes:
        table: "neighborhood_ways_net_vert" #
        # id_column: vert_id
    max_distance: 2680 #
    max_detour: 25 #
    max_stress: 1 #

destinations:
    people:
        weight: 15
        table: neighborhood_census_blocks
        method: percentage
        datafield: pop10
        maxpoints: 100
        breaks: {0.03: 10, 0.2: 40, 0.5: 80}
        uid: gid
    opportunity:
        weight: 20
        employment:
            weight: 35
            table: neighborhood_census_block_jobs
            method: percentage
            datafield: jobs
            maxpoints: 100
            breaks: {0.03: 10, 0.2: 40, 0.5: 80}
            uid: gid
        schools:
            weight: 35
            table: neighborhood_schools
            method: count
            maxpoints: 100
            breaks: {1: 30, 2: 20, 3: 20}
            uid: id
            name: school_name
        colleges:
            weight: 10
            table: neighborhood_colleges
            method: count
            maxpoints: 100
            breaks: {1: 70}
            uid: id
            name: college_name
        universities:
            weight: 20
            table: neighborhood_universities
            method: count
            maxpoints: 100
            breaks: {1: 70}
            uid: id
            name: college_name
    core_services:
        weight: 20
        doctors:
            weight: 20
            table: neighborhood_doctors
            method: count
            maxpoints: 100
            breaks: {1: 40, 2: 20, 3: 10}
            uid: id
            name: doctors_name
        dentists:
            weight: 10
            table: neighborhood_dentists
            method: count
            maxpoints: 100
            breaks: {1: 40, 2: 20, 3: 10}
            uid: id
            name: dentists_name
        hospitals:
            weight: 20
            table: neighborhood_hospitals
            method: count
            maxpoints: 100
            breaks: {1: 70}
            uid: id
            name: hospital_name
        pharmacies:
            weight: 10
            table: neighborhood_pharmacies
            method: count
            maxpoints: 100
            breaks: {1: 40, 2: 20, 3: 10}
            uid: id
            name: pharmacy_name
        supermarkets:
            weight: 25
            table: neighborhood_supermarkets
            method: count
            maxpoints: 100
            breaks: {1: 60, 2: 20}
            uid: id
            name: supermarket_name
        social_services:
            weight: 15
            table: neighborhood_social_services
            method: count
            maxpoints: 100
            breaks: {1: 70}
            uid: id
            name: service_name
    recreation:
        weight: 15
        parks:
            weight: 40
            table: neighborhood_parks
            method: count
            maxpoints: 100
            breaks: {1: 30, 2: 20, 3: 20}
            uid: id
            name: park_name
        trails:
            weight: 35
            table: neighborhood_paths
            method: count
            maxpoints: 100
            breaks: {1: 70, 2: 20}
            method: trails
        community_centers:
            weight: 25
            table: neighborhood_community_centers
            method: count
            maxpoints: 100
            breaks: {1: 40, 2: 20, 3: 10}
            uid: id
            name: center_name
    retail:
        weight: 15
        table: neighborhood_retail
        method: count
        maxpoints: 100
        breaks: {1: 40, 2: 20, 3: 10}
        uid: id
        name: id
    transit:
        weight: 15
        table: neighborhood_transit
        method: count
        maxpoints: 100
        breaks: {1: 60}
        uid: id
        name: transit_name
