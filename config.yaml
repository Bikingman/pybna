#############################################
# Default configuration file for pyBNA
#
# Optional settings are commented out
# In general, optional parameters can be
# deduced through code so you'd only
# want to specify these if you have an
# unusual circumstance
#############################################
# srid: 4326

db:
    user: "gis"
    password: "gis"
    host: "localhost"
    dbname: "bna"

bna:
    boundary:
        table: "neighborhood_boundary"
        geom: "geom"

    blocks:
        table: "neighborhood_census_blocks"
        # schema: "generated"
        id_column: "blockid10"
        population: "pop10"
        geom: "geom"
        roads_tolerance: 15     # determines whether a road is considered "connected" to a block
        min_road_length: 30     # determines whether a road is considered "connected" to a block

    tiles:
        # file: "/path/to/shapefile.shp"
        table: "grid_bna"
        geom: "geom"
        # columns: ["column1","column2"] # note: pybna already grabs the id column

    scenarios:
    # list of scenarios with settings for all BNA inputs
    # default attributes and table names are given in the defaults section
    # below. Attributes and table names for each scenario only need to be
    # provided where they differ from the default. For example, if the default
    # roads table is neighborhood_ways and I want a scenario to use the
    # scenario_ways table I would set
    # roads:
    #     table: "scenario_ways"

      - name: base # this is empty so it uses all the defaults

    # here's an example of a scenario that uses non-defaults
    # note that scenarios are added as a list (i.e. with a dash)
    #   - name: scenario1
    #     notes: "Description of scenario1"
    #     roads:
    #         table: "neighborhood_ways_s1"
    #         geom: "geo"
    #         uid: "id"
    #         source_column: "fr"
    #         target_column: "to"
    #         oneway: {name: "oneway", forward: "fw", backward: "bw"}
    #         stress:
    #             segment:
    #                 forward: fw_stress
    #                 backward: bw_stress
    #             crossing:
    #                 forward: fw_int_stress
    #                 backward: bw_int_stress
    #     intersections:
    #         table: "neighborhood_ways_s1_intersections"
    #         geom: "geo"
    #         uid: "id"
    #     edges:
    #         table: "neighborhood_ways_s1_net_link"
    #         source_column: "source"
    #         target_column: "target"
    #         stress_column: "stress"
    #         cost_column: "cost"
    #         id_column: id
    #     nodes:
    #         table: "neighborhood_ways_s1_net_vert"
    #         id_column: id
    #     max_distance: 5000
    #     max_detour: 50
    #     max_stress: 3

    destinations:
      - name: people
        weight: 15
        table: neighborhood_census_blocks
        method: percentage
        datafield: pop10
        maxpoints: 100
        breaks: {0.03: 10, 0.2: 40, 0.5: 80}
        uid: gid
        blocks: blockid10
      - name: opportunity
        weight: 20
        subcats:
          - name: employment
            weight: 35
            table: neighborhood_census_block_jobs
            method: percentage
            datafield: jobs
            maxpoints: 100
            breaks: {0.03: 10, 0.2: 40, 0.5: 80}
            uid: id
            blocks: blockid10
          - name: schools
            weight: 35
            table: neighborhood_schools
            method: count
            maxpoints: 100
            breaks: {1: 30, 2: 20, 3: 20}
            uid: id
            blocks: blockid10
          - name: colleges
            weight: 10
            table: neighborhood_colleges
            method: count
            maxpoints: 100
            breaks: {1: 70}
            uid: id
            blocks: blockid10
          - name: universities
            weight: 20
            table: neighborhood_universities
            method: count
            maxpoints: 100
            breaks: {1: 70}
            uid: id
            blocks: blockid10
      - name: core_services
        weight: 20
        subcats:
          - name: doctors
            weight: 20
            table: neighborhood_doctors
            method: count
            maxpoints: 100
            breaks: {1: 40, 2: 20, 3: 10}
            uid: id
            blocks: blockid10
          - name: dentists
            weight: 10
            table: neighborhood_dentists
            method: count
            maxpoints: 100
            breaks: {1: 40, 2: 20, 3: 10}
            uid: id
            blocks: blockid10
          - name: hospitals
            weight: 20
            table: neighborhood_hospitals
            method: count
            maxpoints: 100
            breaks: {1: 70}
            uid: id
            blocks: blockid10
          - name: pharmacies
            weight: 10
            table: neighborhood_pharmacies
            method: count
            maxpoints: 100
            breaks: {1: 40, 2: 20, 3: 10}
            uid: id
            blocks: blockid10
          - name: supermarkets
            weight: 25
            table: neighborhood_supermarkets
            method: count
            maxpoints: 100
            breaks: {1: 60, 2: 20}
            uid: id
            blocks: blockid10
          - name: social_services
            weight: 15
            table: neighborhood_social_services
            method: count
            maxpoints: 100
            breaks: {1: 70}
            uid: id
            blocks: blockid10
      - name: recreation
        weight: 15
        subcats:
          - name: parks
            weight: 40
            table: neighborhood_parks
            method: count
            maxpoints: 100
            breaks: {1: 30, 2: 20, 3: 20}
            uid: id
            blocks: blockid10
        #   - name: trails
        #     weight: 35
        #     table: neighborhood_paths
        #     method: count
        #     maxpoints: 100
        #     breaks: {1: 70, 2: 20}
        #     method: trails
        #     blocks: blockid10
          - name: community_centers
            weight: 25
            table: neighborhood_community_centers
            method: count
            maxpoints: 100
            breaks: {1: 40, 2: 20, 3: 10}
            uid: id
            blocks: blockid10
      - name: retail
        weight: 15
        table: neighborhood_retail
        method: count
        maxpoints: 100
        breaks: {1: 40, 2: 20, 3: 10}
        uid: id
        blocks: blockid10
      - name: transit
        weight: 15
        table: neighborhood_transit
        method: count
        maxpoints: 100
        breaks: {1: 60}
        uid: id
        blocks: blockid10

    defaults:
        scenario:
            notes: "Default BNA scenario"
            roads:
                table: "neighborhood_ways"
                geom: "geom"
                uid: "road_id"
                source_column: "intersection_from"
                target_column: "intersection_to"
                oneway: {name: "one_way", forward: "ft", backward: "tf"}
                stress:
                    segment:
                        forward: ft_seg_stress
                        backward: tf_seg_stress
                    crossing:
                        forward: ft_int_stress
                        backward: tf_int_stress
            intersections:
                table: "neighborhood_ways_intersections"
                geom: "geom"
                uid: "int_id"
            edges:
                table: "neighborhood_ways_net_link"
                source_column: "source_vert"
                target_column: "target_vert"
                stress_column: "link_stress"
                cost_column: "link_cost"
                id_column: link_id
            nodes:
                table: "neighborhood_ways_net_vert"
                id_column: vert_id
            max_distance: 2680
            max_detour: 25
            max_stress: 1
