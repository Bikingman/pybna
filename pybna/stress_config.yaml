#
# Default configuration file for traffic stress analysis
#
# YAML reference here:
# http://yaml.org/spec/1.1/#id857168
# or you can also refer to a python-specific reference here:
# http://pyyaml.org/wiki/PyYAMLDocumentation
#
# Has the following expectations for column values:
#   - bike_infra: bike_lane, buffered_lane, track (NULL=shared lane)
#   - all width columns expressed in feet
#   - speed must be a number (i.e. no "mph" at the end)
#   - lanes must be a number
#   - parking is a number
db:
    user: "gis"
    password: "gis"
    host: "192.168.60.220" #"localhost"
    dbname: "bna"


stress:
    table:
        name: "generated.neighborhood_ways"
        geom: "geom"

    lookup_tables:
        shared: "generated.stress_shared"
        bike_lane: "generated.stress_bike_lane"
        crossing: "generated.stress_crossing"

    segment:
        forward:
            lanes: ft_lanes
            oneway: {name: "one_way", val: "ft"}    # given as a pair (column_name, value)
            # aadt: aadt
            # centerline: {name: "centerline", val: 1}  # given as a pair (column_name, value)
            speed: speed_limit
            parking: {name: "ft_park", val: 1}
            # parking_width: ft_park_width
            bike_infra: {name: "ft_bike_infra", lane: "lane", buffered_lane: "buffered_lane", track: "track", path: "path"}
            bike_lane_width: ft_bike_infra_width
        backward:
            lanes: tf_lanes
            oneway: {name: "one_way", val: "tf"}
            speed: speed_limit
            parking: {name: "ft_park", val: 1}
            bike_infra: {name: "ft_bike_infra", lane: "lane", buffered_lane: "buffered_lane", track: "track", path: "path"}
            # bike_lane_width: tf_bike_infra_width

    crossing:
        intersection_tolerance: 5
        control:
            # control is required
            table: neighborhood_ways_intersections
            geom: geom
            column:
                name: "control"
                four_way_stop: "stop"
                signal: "signal"
                rrfb: "rrfb"
                hawk: "hawk"
        island:
            table: neighborhood_ways_intersections
            geom: geom
            column:
                name: "island"
                value: True
        forward:
            # lanes: ft_cross_lanes
            # speed: ft_speed_limit
            # control: ft_control
            # island: ft_island
        backward:
            # lanes: tf_cross_lanes
            # speed: tf_speed_limit
            # control: tf_control
            # island: tf_island

    assumptions:
        # These are assumptions we make to cover holes in the data. Assumptions
        # must match one of the values in a stress target.
        # Assumptions are entered as a where clause and a value. Note that each
        # clause is entered as a list item (with a dash)
        # An "else" statement can be included at the end if desired
        # A "*" matches everything (i.e. applied universally)
        segment:
            lanes:
                - where: "functional_class IN ('primary','secondary')"
                  val: 2
                - where: "functional_class IN ('tertiary','unclassified','residential')"
                  val: 1
                - else: 1
            speed:
                - where: "functional_class IN ('primary','secondary')"
                  val: 40
                - where: "functional_class = 'tertiary'"
                  val: 30
                - where: "functional_class IN ('unclassified','residential')"
                  val: 25
                - else: 30
            parking:
                - where: "*"
                  val: True
            parking_width:
                - where: "*"
                  val: 8
            bike_lane_width:
                - where: "*"
                  val: 5
            centerline:
                - where: "functional_class IN ('primary','secondary','tertiary')"
                  val: True
                - else: False
            aadt:
                - where: "functional_class IN ('primary','secondary')"
                  val: 20000
                - where: "functional_class = 'tertiary'"
                  val: 10000
                - where: "functional_class IN ('unclassified','residential')"
                  val: 500
                - else: 20000

        crossing:
            priority:
                # This section allows us to define priority rules that assume
                # a crossing is low stress because it is given priority (i.e.
                # doesn't yield to cross traffic) or because it is assumed to
                # be signal-controlled
                #   where: matches the streets where the score should be applied.
                #   meets: this is used to match the cross streets, if a match
                #       is found priority is given. A * matches everything.
                - where: "functional_class = 'primary'"
                  meets: "*"
                - where: "functional_class = 'secondary'"
                  meets: "*"
                - where: "functional_class = 'tertiary'"
                  meets: "functional_class IN ('residential','unclassified')"
